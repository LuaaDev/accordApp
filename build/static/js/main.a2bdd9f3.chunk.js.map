{"version":3,"sources":["features/appSlice.js","SidebarChannel.js","firebase.js","features/userSlice.js","Sidebar.js","ChatHeader.js","Message.js","Chat.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","channelId","channelName","reducers","setChannelInfo","state","action","payload","actions","selectchannelId","app","selectchannelName","SidebarChannel","id","dispatch","useDispatch","className","onClick","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","userSlice","user","login","logout","selectUser","Sidebar","useSelector","useState","channels","setChannels","useEffect","collection","onSnapshot","snapshot","docs","map","doc","channel","data","prompt","add","key","fontSize","Avatar","src","photo","displayName","uid","substring","ChatHeader","placeholderSearch","Message","timestamp","message","Date","toDate","toUTCString","Chat","input","setInput","messages","setMessages","orderBy","value","onChange","e","target","placeholder","type","preventDefault","FieldValue","serverTimestamp","Login","alt","Button","_","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yaAEaA,EAAWC,YAAY,CAClCC,KAAM,MACNC,aAAc,CACZC,UAAW,KACXC,YAAa,MAEfC,SAAU,CACRC,eAAgB,SAACC,EAAOC,GACtBD,EAAMJ,UAAYK,EAAOC,QAAQN,UACjCI,EAAMH,YAAcI,EAAOC,QAAQL,gBAK1BE,EAAmBP,EAASW,QAA5BJ,eAEFK,EAAkB,SAACJ,GAAD,OAAWA,EAAMK,IAAIT,WACvCU,EAAoB,SAACN,GAAD,OAAWA,EAAMK,IAAIR,aAEvCL,IAAf,Q,MCDee,MAff,YAA8C,IAApBC,EAAmB,EAAnBA,GAAIX,EAAe,EAAfA,YACpBY,EAAWC,cAEjB,OACI,yBAAKC,UAAU,iBAAiBC,QAAS,kBAAMH,EAASV,EAAe,CACnEH,UAAWY,EACXX,YAAaA,OAEb,4BAAI,0BAAMc,UAAU,wBAAhB,KACCd,K,gICAXgB,EADcC,IAASC,cAXN,CACnBC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIIC,YACjBC,EAAOX,IAASW,OAChBC,EAAW,IAAIZ,IAASW,KAAKE,mBAGpBd,ICjBFe,EAAYnC,YAAY,CACnCC,KAAM,OACNC,aAAc,CACZkC,KAAM,MAER/B,SAAU,CACRgC,MAAO,SAAC9B,EAAOC,GACbD,EAAM6B,KAAO5B,EAAOC,SAEtB6B,OAAQ,SAAC/B,GACPA,EAAM6B,KAAO,S,EAKcD,EAAUzB,QAA5B2B,E,EAAAA,MAAOC,E,EAAAA,OAETC,EAAa,SAAChC,GAAD,OAAWA,EAAM6B,KAAKA,MAEjCD,IAAf,QC+EeK,MApFf,WACI,IAAMJ,EAAOK,YAAYF,GADV,EAEiBG,mBAAS,IAF1B,mBAERC,EAFQ,KAEEC,EAFF,KAuBf,OAnBAC,qBAAU,WACNzB,EAAG0B,WAAW,YAAYC,YAAW,SAAAC,GAAQ,OACzCJ,EAAYI,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAClCpC,GAAIoC,EAAIpC,GACRqC,QAASD,EAAIE,iBAGtB,IAaC,yBAAKnC,UAAU,WACX,yBAAKA,UAAU,gBACX,oDACA,kBAAC,IAAD,OAGJ,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,2BACX,yBAAKA,UAAU,mBACX,kBAAC,IAAD,MACA,8CAGJ,kBAAC,IAAD,CAASC,QAxBA,WACrB,IAAMf,EAAckD,OAAO,4BAExBlD,GACCgB,EAAG0B,WAAW,YAAYS,IAAI,CAC1BnD,YAAaA,KAmB2Bc,UAAU,yBAGlD,yBAAKA,UAAU,yBACVyB,EAASO,KAAI,gBAAGnC,EAAH,EAAGA,GAAIqC,EAAP,EAAOA,QAAP,OACV,kBAAC,EAAD,CACAI,IAAKzC,EACLA,GAAIA,EACJX,YAAagD,EAAQhD,mBAMjC,yBAAKc,UAAU,kBACX,kBAAC,IAAD,CACIA,UAAU,qBACVuC,SAAS,UAEb,yBAAKvC,UAAU,sBACX,+CACA,sCAGJ,yBAAKA,UAAU,uBACX,kBAAC,IAAD,MACA,kBAAC,IAAD,QAIR,yBAAKA,UAAU,oBACX,kBAACwC,EAAA,EAAD,CAAQC,IAAKvB,EAAKwB,QAClB,yBAAK1C,UAAU,wBACX,4BAAKkB,EAAKyB,aACV,+BAAKzB,EAAK0B,IAAIC,UAAU,EAAG,KAG/B,yBAAK7C,UAAU,yBACX,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,U,0HCvDL8C,OA7Bf,YAAsC,IAAhB5D,EAAe,EAAfA,YAClB,OACI,yBAAKc,UAAU,cACX,yBAAKA,UAAU,oBACX,4BACI,0BAAMA,UAAU,oBAAhB,KAGCd,IAIT,yBAAKc,UAAU,qBACX,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MAEA,yBAAKA,UAAU,sBACX,2BAAO+C,mBAAiB,IACxB,kBAAC,IAAD,OAGJ,kBAAC,KAAD,MACA,kBAAC,KAAD,S,sFCTDC,OAnBf,YAAgD,IAA7BC,EAA4B,EAA5BA,UAAW/B,EAAiB,EAAjBA,KAAMgC,EAAW,EAAXA,QAEhC,OACI,yBAAKlD,UAAU,WACX,kBAACwC,EAAA,EAAD,CAAQC,IAAKvB,EAAKwB,QAClB,yBAAK1C,UAAU,iBACX,4BACKkB,EAAKyB,YACN,0BAAM3C,UAAU,qBAAhB,WACa,IAAImD,KAAJ,OAASF,QAAT,IAASA,OAAT,EAASA,EAAWG,UAAUC,gBAI/C,2BAAIH,MC4DLI,OA/Df,WACI,IAAMpC,EAAOK,YAAYF,GACnBpC,EAAYsC,YAAY9B,GACxBP,EAAcqC,YAAY5B,GAHpB,EAIc6B,mBAAS,IAJvB,mBAIL+B,EAJK,KAIEC,EAJF,OAKoBhC,mBAAS,IAL7B,mBAKLiC,EALK,KAKKC,EALL,KA6BZ,OAtBA/B,qBAAU,WACH1C,GACCiB,EAAG0B,WAAW,YAAYK,IAAIhD,GAAW2C,WAAW,YAAY+B,QAAQ,YAAa,QAAQ9B,YAAW,SAAAC,GAAQ,OAC5G4B,EAAY5B,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIE,gBAGlD,CAAClD,IAiBA,yBAAKe,UAAU,QACX,kBAAC,GAAD,CAAYd,YAAaA,IAEzB,yBAAKc,UAAU,kBACVyD,EAASzB,KAAI,SAACkB,GAAD,OACV,kBAAC,GAAD,CACID,UAAWC,EAAQD,UACnBC,QAASA,EAAQA,QACjBhC,KAAMgC,EAAQhC,WAK1B,yBAAKlB,UAAU,eACX,kBAAC,KAAD,CAAeuC,SAAS,UACxB,8BACI,2BAAOqB,MAAOL,EAAOM,SAAU,SAAAC,GAAC,OAAIN,EAASM,EAAEC,OAAOH,QAAQI,YAAW,sBAAiB9E,KAE1F,4BAAQc,UAAU,oBAAoBiE,KAAK,SAAShE,QAhChD,SAAC6D,GACjBA,EAAEI,iBAEFhE,EAAG0B,WAAW,YAAYK,IAAIhD,GAAW2C,WAAW,YAAYS,IAAI,CAChEY,UAAW9C,IAASU,UAAUsD,WAAWC,kBACzClB,QAASK,EACTrC,KAAMA,IAGVsC,EAAS,MAuBG,8DAKJ,yBAAKxD,UAAU,oBACX,kBAAC,KAAD,CAAkBuC,SAAS,UAC3B,kBAAC,KAAD,CAASA,SAAS,UAClB,kBAAC,KAAD,CAAmBA,SAAS,c,gBCtCjC8B,OA3Bf,WAKI,OACI,yBAAKrE,UAAU,SAEX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,SACf,yBAAKA,UAAU,SACf,yBAAKA,UAAU,SACf,yBAAKA,UAAU,UAGnB,4EAEA,yBAAKA,UAAU,eACX,yBAAKyC,IAAI,GAAG6B,IAAI,MAGpB,kBAACC,GAAA,EAAD,CAAQtE,QApBK,SAAAuE,GACjB1D,EAAK2D,gBAAgB1D,GAAU2D,OAAM,SAAAC,GAAK,OAAIC,MAAMD,EAAMzB,cAmBtD,yBCYG2B,OA5Bf,WACE,IAAM/E,EAAWC,cACXmB,EAAOK,YAAYF,GAmBzB,OAjBAM,qBAAW,WACTb,EAAKgE,oBAAmB,SAACC,GAGrBjF,EAFEiF,EAEO5D,EAAM,CACbyB,IAAKmC,EAASnC,IACdF,MAAOqC,EAASC,SAChBC,MAAOF,EAASE,MAChBtC,YAAaoC,EAASpC,cAIfvB,UAGZ,CAACtB,IAGF,yBAAKE,UAAU,OACXkB,EAAS,wCAAG,kBAAC,EAAD,MAAH,IAAe,kBAAC,GAAD,MAAf,KAAkC,kBAAC,GAAD,QC7BpCgE,eAAe,CAC5BC,QAAS,CACPjE,KAAMkE,EACN1F,IAAK2F,KCKWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,IACf,kBAAC,GAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a2bdd9f3.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    channelId: null,\r\n    channelName: null\r\n  },\r\n  reducers: {\r\n    setChannelInfo: (state, action) => {\r\n      state.channelId = action.payload.channelId;\r\n      state.channelName = action.payload.channelName;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectchannelId = (state) => state.app.channelId;\r\nexport const selectchannelName = (state) => state.app.channelName;\r\n\r\nexport default appSlice.reducer;\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setChannelInfo } from './features/appSlice'\r\nimport \"./SidebarChannel.css\"\r\n\r\nfunction SidebarChannel({ id, channelName }) {\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div className=\"sidebarChannel\" onClick={() => dispatch(setChannelInfo({\r\n            channelId: id,\r\n            channelName: channelName,\r\n            }))}>\r\n            <h4><span className=\"sidebarChannel__hash\">#</span>\r\n                {channelName}\r\n            </h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChannel\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCBJym1dZfsKzoHAjiUiwuPdqrL7k81kek\",\r\n    authDomain: \"accord-cloud.firebaseapp.com\",\r\n    databaseURL: \"https://accord-cloud.firebaseio.com\",\r\n    projectId: \"accord-cloud\",\r\n    storageBucket: \"accord-cloud.appspot.com\",\r\n    messagingSenderId: \"911929184093\",\r\n    appId: \"1:911929184093:web:a125baedfbc7e30ae3a2b4\",\r\n    measurementId: \"G-7TV10341E9\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import React, { useEffect, useState } from 'react';\r\nimport \"./Sidebar.css\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMoreRounded';\r\nimport AddIcon from '@material-ui/icons/AddRounded';\r\nimport SidebarChannel from './SidebarChannel';\r\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAltRounded';\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport CallIcon from '@material-ui/icons/CallRounded';\r\nimport MicIcon from '@material-ui/icons/MicRounded';\r\nimport HeadsetIcon from '@material-ui/icons/HeadsetRounded';\r\nimport SettingsIcon from '@material-ui/icons/SettingsRounded';\r\nimport { Avatar } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\nimport db from './firebase'\r\nimport { selectUser } from './features/userSlice';\r\n\r\nfunction Sidebar() {\r\n    const user = useSelector(selectUser);\r\n    const [channels, setChannels] = useState([]);\r\n\r\n    useEffect(() => {\r\n        db.collection('channels').onSnapshot(snapshot => (\r\n            setChannels(snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                channel: doc.data(),\r\n            })))\r\n        ));\r\n    }, []);\r\n\r\n    const handleAddChannel = () => {\r\n        const channelName = prompt(\"Enter a new channel name\");\r\n\r\n        if(channelName) {\r\n            db.collection('channels').add({\r\n                channelName: channelName,\r\n            })\r\n        }\r\n    }\r\n\r\n    return ( \r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__top\">\r\n                <h3>Joshua's Test Server</h3>\r\n                <ExpandMoreIcon />\r\n            </div>\r\n\r\n            <div className=\"sidebar__channels\">\r\n                <div className=\"sidebar__channelsHeader\">\r\n                    <div className=\"sidebar__header\">\r\n                        <ExpandMoreIcon />\r\n                        <h4>Text Channels</h4>\r\n                    </div>\r\n\r\n                    <AddIcon onClick={handleAddChannel} className=\"sidebar__addChannel\" />\r\n                </div>\r\n\r\n                <div className=\"sidebar__channelsList\">\r\n                    {channels.map(( {id, channel }) => (\r\n                        <SidebarChannel\r\n                        key={id}\r\n                        id={id}\r\n                        channelName={channel.channelName}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar__voice\">\r\n                <SignalCellularAltIcon\r\n                    className=\"sidebar__voiceIcon\"\r\n                    fontSize=\"large\"\r\n                />\r\n                <div className=\"sidebar__voiceInfo\">\r\n                    <h3>Voice Connected</h3>\r\n                    <p>Stream</p>\r\n                </div>\r\n\r\n                <div className=\"sidebar__voiceIcons\">\r\n                    <InfoOutlinedIcon />\r\n                    <CallIcon />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar__profile\">\r\n                <Avatar src={user.photo} />\r\n                <div className=\"sidebar__profileInfo\">\r\n                    <h3>{user.displayName}</h3>\r\n                    <p>#{user.uid.substring(0, 5)}</p>\r\n                </div>\r\n\r\n                <div className=\"sidebar__profileIcons\">\r\n                    <MicIcon />\r\n                    <HeadsetIcon />\r\n                    <SettingsIcon />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React from 'react'\r\nimport \"./ChatHeader.css\"\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport EditLocationRoundedIcon from '@material-ui/icons/EditLocationRounded';\r\nimport PeopleAltRoundedIcon from '@material-ui/icons/PeopleAltRounded';\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\r\nimport HelpRoundedIcon from '@material-ui/icons/HelpRounded';\r\n\r\nfunction ChatHeader({ channelName }) {\r\n    return (\r\n        <div className=\"chatHeader\">\r\n            <div className=\"chatHeader__left\">\r\n                <h3>\r\n                    <span className=\"chatHeader__hash\">\r\n                    #\r\n                    </span>\r\n                    {channelName}\r\n                </h3>\r\n            </div>\r\n\r\n            <div className=\"chatHeader__right\">\r\n                <NotificationsIcon />\r\n                <EditLocationRoundedIcon />\r\n                <PeopleAltRoundedIcon />\r\n\r\n                <div className=\"chatHeader__search\">\r\n                    <input placeholderSearch />\r\n                    <SearchRoundedIcon />\r\n                </div>\r\n\r\n                <SendRoundedIcon />\r\n                <HelpRoundedIcon />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatHeader\r\n","import { Avatar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport \"./Message.css\"\r\n\r\nfunction Message({ timestamp, user, message }) {\r\n    \r\n    return (\r\n        <div className=\"message\">\r\n            <Avatar src={user.photo}/>\r\n            <div className=\"message__info\">\r\n                <h4>\r\n                    {user.displayName}\r\n                    <span className=\"message_timestamp\">\r\n                        Sent at {new Date(timestamp?.toDate()).toUTCString()}\r\n                    </span>\r\n                </h4>\r\n\r\n                <p>{message}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport \"./Chat.css\"\r\nimport ChatHeader from './ChatHeader'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport CardGiftcardIcon from '@material-ui/icons/CardGiftcard';\r\nimport GifIcon from '@material-ui/icons/GifRounded';\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\r\nimport Message from './Message';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectchannelId, selectchannelName } from './features/appSlice';\r\nimport { selectUser } from './features/userSlice';\r\nimport db from './firebase';\r\nimport firebase from 'firebase';\r\n\r\nfunction Chat() {\r\n    const user = useSelector(selectUser)\r\n    const channelId = useSelector(selectchannelId)\r\n    const channelName = useSelector(selectchannelName)\r\n    const [input, setInput] = useState(\"\")\r\n    const [messages, setMessages] = useState([])\r\n\r\n    useEffect(() => {\r\n        if(channelId) {\r\n            db.collection('channels').doc(channelId).collection(\"messages\").orderBy('timestamp', 'desc').onSnapshot(snapshot => \r\n                setMessages(snapshot.docs.map(doc => doc.data()))\r\n            )   \r\n        }\r\n    }, [channelId])\r\n\r\n    \r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n\r\n        db.collection('channels').doc(channelId).collection('messages').add({\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            message: input,\r\n            user: user,\r\n        })\r\n\r\n        setInput(\"\")\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <ChatHeader channelName={channelName} />\r\n\r\n            <div className=\"chat__messages\">\r\n                {messages.map((message) => (\r\n                    <Message \r\n                        timestamp={message.timestamp}\r\n                        message={message.message}\r\n                        user={message.user}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"chat__input\">\r\n                <AddCircleIcon fontSize=\"large\" />\r\n                <form>\r\n                    <input value={input} onChange={e => setInput(e.target.value)} placeholder={`Message at #${channelName}`} />\r\n\r\n                    <button className=\"chat__inputButton\" type=\"submit\" onClick={sendMessage}>\r\n                        If you see these that means Accord is broken 😉\r\n                    </button>\r\n                </form>\r\n\r\n                <div className=\"chat__inputIcons\">\r\n                    <CardGiftcardIcon fontSize=\"large\" />\r\n                    <GifIcon fontSize=\"large\" />\r\n                    <EmojiEmotionsIcon fontSize=\"large\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import { Button } from '@material-ui/core';\r\nimport { auth, provider } from \"./firebase\"\r\nimport React from 'react'\r\nimport './Login.css'\r\n\r\nfunction Login() {\r\n    const signInGoogle = _ => {\r\n        auth.signInWithPopup(provider).catch(error => alert(error.message));\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n\r\n            <div className=\"sky__container\">\r\n                <div className=\"star\"></div>\r\n                <div className=\"star\"></div>\r\n                <div className=\"star\"></div>\r\n                <div className=\"star\"></div>\r\n            </div>\r\n\r\n            <h2>You need to login in order to enter the app!</h2>\r\n\r\n            <div className=\"login__logo\">\r\n                <img src=\"\" alt=\"\"></img>\r\n            </div>\r\n\r\n            <Button onClick={signInGoogle}>Sign in with Google</Button>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport Sidebar from './Sidebar';\r\nimport Chat from './Chat';\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { selectUser } from './features/userSlice'\r\nimport Login from './Login'\r\nimport { auth } from './firebase';\r\nimport { login, logout } from \"./features/userSlice\";\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser);\r\n\r\n  useEffect( () => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        // The user is already logged in\r\n        dispatch(login({\r\n          uid: authUser.uid,\r\n          photo: authUser.photoURL,\r\n          email: authUser.email,\r\n          displayName: authUser.displayName,\r\n        }))\r\n      } else {\r\n        // The user is logged out / not logged in\r\n        dispatch(logout());\r\n      }\r\n    })\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      { user ? ( <> <Sidebar /> <Chat /> </> ) : ( <Login /> ) }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\nimport appReducer from '../features/appSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}